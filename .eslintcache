[{"D:\\desktop\\temp\\jspang-admin\\admin\\src\\index.js":"1","D:\\desktop\\temp\\jspang-admin\\admin\\src\\App.js":"2","D:\\desktop\\temp\\jspang-admin\\admin\\src\\pages\\Login.jsx":"3","D:\\desktop\\temp\\jspang-admin\\admin\\src\\pages\\Main.js":"4","D:\\desktop\\temp\\jspang-admin\\admin\\src\\pages\\Index.jsx":"5","D:\\desktop\\temp\\jspang-admin\\admin\\src\\pages\\Article.jsx":"6","D:\\desktop\\temp\\jspang-admin\\admin\\src\\config\\apiUrl.js":"7","D:\\desktop\\temp\\jspang-admin\\admin\\src\\pages\\ArticleList.jsx":"8","D:\\desktop\\temp\\jspang-admin\\admin\\src\\pages\\Test.jsx":"9"},{"size":188,"mtime":1606726260001,"results":"10","hashOfConfig":"11"},{"size":132,"mtime":1606724868387,"results":"12","hashOfConfig":"11"},{"size":2286,"mtime":1606809469609,"results":"13","hashOfConfig":"11"},{"size":522,"mtime":1606904539293,"results":"14","hashOfConfig":"11"},{"size":2860,"mtime":1606904687324,"results":"15","hashOfConfig":"11"},{"size":7838,"mtime":1606894716281,"results":"16","hashOfConfig":"11"},{"size":880,"mtime":1606894187166,"results":"17","hashOfConfig":"11"},{"size":2946,"mtime":1606895261675,"results":"18","hashOfConfig":"11"},{"size":116,"mtime":1606899863010,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1ugedb0",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\desktop\\temp\\jspang-admin\\admin\\src\\index.js",[],["42","43"],"D:\\desktop\\temp\\jspang-admin\\admin\\src\\App.js",[],"D:\\desktop\\temp\\jspang-admin\\admin\\src\\pages\\Login.jsx",[],"D:\\desktop\\temp\\jspang-admin\\admin\\src\\pages\\Main.js",[],"D:\\desktop\\temp\\jspang-admin\\admin\\src\\pages\\Index.jsx",[],"D:\\desktop\\temp\\jspang-admin\\admin\\src\\pages\\Article.jsx",["44","45","46","47"],"import React, { useState, useEffect } from 'react';\r\nimport marked from 'marked'\r\nimport '../static/css/Article.css'\r\nimport { Row, Col, Input, Select, Button, DatePicker, message } from 'antd'\r\nimport axios from 'axios'\r\nimport servicePath from '../config/apiUrl'\r\nimport { withRouter } from 'react-router-dom'\r\n\r\n\r\nconst { Option } = Select;\r\nconst { TextArea } = Input\r\n\r\n\r\nfunction AddArticle(props) {\r\n\r\n  const [articleId, setArticleId] = useState(0)  // 文章的ID，如果是0说明是新增加，如果不是0，说明是修改\r\n  const [articleTitle, setArticleTitle] = useState('')   //文章标题\r\n  const [articleContent, setArticleContent] = useState('')  //markdown的编辑内容\r\n  const [markdownContent, setMarkdownContent] = useState('预览内容') //html内容\r\n  const [introducemd, setIntroducemd] = useState()            //简介的markdown内容\r\n  const [introducehtml, setIntroducehtml] = useState('等待编辑') //简介的html内容\r\n  const [showDate, setShowDate] = useState()   //发布日期\r\n  const [updateDate, setUpdateDate] = useState() //修改日志的日期\r\n  const [typeInfo, setTypeInfo] = useState([]) // 文章类别信息\r\n  const [selectedType, setSelectType] = useState(1) //选择的文章类别\r\n\r\n  marked.setOptions({\r\n    renderer: marked.Renderer(),\r\n    gfm: true,\r\n    pedantic: false,\r\n    sanitize: false,\r\n    tables: true,\r\n    breaks: false,\r\n    smartLists: true,\r\n    smartypants: false,\r\n  });\r\n\r\n  const changeContent = (e) => {\r\n    setArticleContent(e.target.value)\r\n    let html = marked(e.target.value)\r\n    setMarkdownContent(html)\r\n  }\r\n\r\n  const changeIntroduce = (e) => {\r\n    setIntroducemd(e.target.value)\r\n    let html = marked(e.target.value)\r\n    setIntroducehtml(html)\r\n  }\r\n\r\n  const getTypeInfo = () => {\r\n    axios({\r\n      method: 'get',\r\n      url: servicePath.getTypeInfo,\r\n      header: { 'Access-Control-Allow-Origin': '*' },\r\n      withCredentials: true\r\n    }).then(\r\n      res => {\r\n        if (res.data.data == \"没有登录\") {\r\n          localStorage.removeItem('openId')\r\n          props.history.push('/')\r\n        } else {\r\n          setTypeInfo(res.data.data)\r\n        }\r\n\r\n      }\r\n    )\r\n  }\r\n\r\n  const getArticleById = (id) => {\r\n    axios(servicePath.getArticleById + id, {\r\n      withCredentials: true,\r\n      header: { 'Access-Control-Allow-Origin': '*' }\r\n    }).then(\r\n      res => {\r\n        //let articleInfo= res.data.data[0]\r\n        setArticleTitle(res.data.data[0].title)\r\n        setArticleContent(res.data.data[0].article_content)\r\n        let html = marked(res.data.data[0].article_content)\r\n        setMarkdownContent(html)\r\n        setIntroducemd(res.data.data[0].introduce)\r\n        let tmpInt = marked(res.data.data[0].introduce)\r\n        setIntroducehtml(tmpInt)\r\n        setShowDate(res.data.data[0].addTime)\r\n        setSelectType(res.data.data[0].typeId)\r\n\r\n      }\r\n    )\r\n  }\r\n\r\n\r\n  const saveArticle = () => {\r\n    if (!selectedType) {\r\n      message.error('必须选择文章类别')\r\n      return false\r\n    } else if (!articleTitle) {\r\n      message.error('文章名称不能为空')\r\n      return false\r\n    } else if (!articleContent) {\r\n      message.error('文章内容不能为空')\r\n      return false\r\n    } else if (!introducemd) {\r\n      message.error('简介不能为空')\r\n      return false\r\n    } else if (!showDate) {\r\n      message.error('发布日期不能为空')\r\n      return false\r\n    }\r\n    let dataProps = {}   //传递到接口的参数\r\n    dataProps.type_id = selectedType\r\n    dataProps.title = articleTitle\r\n    dataProps.article_content = articleContent\r\n    dataProps.introduce = introducemd\r\n    let datetext = showDate.replace('-', '/') //把字符串转换成时间戳\r\n    dataProps.add_time = (new Date(datetext).getTime()) / 1000\r\n\r\n\r\n    if (articleId === 0) {\r\n      console.log('articleId=:' + articleId)\r\n      dataProps.view_count = Math.ceil(Math.random() * 100) + 1000\r\n      axios({\r\n        method: 'post',\r\n        url: servicePath.addArticle,\r\n        data: dataProps,\r\n        withCredentials: true\r\n      }).then(\r\n        res => {\r\n          setArticleId(res.data.insertId)\r\n          if (res.data.isScuccess) {\r\n            message.success('文章保存成功')\r\n          } else {\r\n            message.error('文章保存失败');\r\n          }\r\n\r\n        }\r\n      )\r\n    } else {\r\n\r\n      dataProps.id = articleId\r\n      axios({\r\n        method: 'post',\r\n        url: servicePath.updateArticle,\r\n        header: { 'Access-Control-Allow-Origin': '*' },\r\n        data: dataProps,\r\n        withCredentials: true\r\n      }).then(\r\n        res => {\r\n\r\n          if (res.data.isScuccess) {\r\n            message.success('文章保存成功')\r\n          } else {\r\n            message.error('保存失败');\r\n          }\r\n\r\n\r\n        }\r\n      )\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    getTypeInfo()\r\n    //获得文章ID\r\n    let tmpId = props.match.params.id\r\n    if (tmpId) {\r\n      setArticleId(tmpId)\r\n      getArticleById(tmpId)\r\n    }\r\n  }, [])\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <Row gutter={5}>\r\n        <Col span={18}>\r\n          <Row gutter={10} >\r\n            <Col span={20}>\r\n              <Input\r\n                placeholder=\"博客标题\"\r\n                size=\"large\"\r\n                onChange={(e) => setArticleTitle(e.target.value)}\r\n              />\r\n            </Col>\r\n            <Col span={4}>\r\n              &nbsp;\r\n              <Select defaultValue={selectedType} size=\"large\" onChange={setSelectType}>\r\n                {\r\n                  Array.isArray(typeInfo) && typeInfo.map((item, index) => {\r\n                    return (<Option key={index} value={item.Id}>{item.type_name}</Option>)\r\n                  })\r\n                }\r\n              </Select>\r\n            </Col>\r\n          </Row>\r\n          <br />\r\n          <Row gutter={10} >\r\n            <Col span={12}>\r\n              <TextArea\r\n                value={articleContent}\r\n                className=\"markdown-content\"\r\n                rows={35}\r\n                onChange={changeContent}\r\n                onPressEnter={changeContent}\r\n                placeholder=\"文章内容\"\r\n              />\r\n            </Col>\r\n            <Col span={12}>\r\n              <div\r\n                className=\"show-html\"\r\n                dangerouslySetInnerHTML={{ __html: markdownContent }} />\r\n\r\n            </Col>\r\n          </Row>\r\n\r\n        </Col>\r\n\r\n        <Col span={6}>\r\n          <Row>\r\n            <Col span={24}>\r\n              <Button size=\"large\">暂存文章</Button>&nbsp;\r\n              <Button type=\"primary\" size=\"large\" onClick={saveArticle}>发布文章</Button>\r\n              <br />\r\n            </Col>\r\n            <Col span={24}>\r\n              <br />\r\n              <TextArea\r\n                rows={4}\r\n                value={introducemd}\r\n                onChange={changeIntroduce}\r\n                onPressEnter={changeIntroduce}\r\n                placeholder=\"文章简介\"\r\n              />\r\n              <div\r\n                className=\"introduce-html\"\r\n                dangerouslySetInnerHTML={{ __html: '文章简介：' + introducehtml }} >\r\n              </div>\r\n            </Col>\r\n            <Col span={12}>\r\n              <div className=\"date-select\">\r\n                <DatePicker\r\n                  onChange={(date, dateString) => setShowDate(dateString)}\r\n                  placeholder=\"发布日期\"\r\n                  size=\"large\"\r\n                />\r\n              </div>\r\n            </Col>\r\n            <Col span={12}>\r\n              <div className=\"date-select\">\r\n                <DatePicker\r\n                  placeholder=\"修改日期\"\r\n                  size=\"large\"\r\n                />\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default withRouter(AddArticle)",["48","49"],"D:\\desktop\\temp\\jspang-admin\\admin\\src\\config\\apiUrl.js",[],"D:\\desktop\\temp\\jspang-admin\\admin\\src\\pages\\ArticleList.jsx",["50"],"\r\nimport React, { useState, useEffect } from 'react';\r\nimport '../static/css/ArticleList.css'\r\nimport { List, Row, Col, Modal, message, Button, Switch } from 'antd';\r\nimport axios from 'axios'\r\nimport servicePath from '../config/apiUrl'\r\nimport { withRouter } from 'react-router-dom'\r\nconst { confirm } = Modal;\r\n\r\nfunction ArticleList(props) {\r\n\r\n  const [list, setList] = useState([])\r\n  //得到文章列表\r\n  const getList = () => {\r\n    axios({\r\n      method: 'get',\r\n      url: servicePath.getArticleList,\r\n      withCredentials: true,\r\n      header: { 'Access-Control-Allow-Origin': '*' }\r\n    }).then(\r\n      res => {\r\n        setList(res.data.list)\r\n\r\n      }\r\n    )\r\n  }\r\n\r\n\r\n  //删除文章的方法\r\n  const delArticle = (id) => {\r\n    confirm({\r\n      title: '确定要删除这篇博客文章吗?',\r\n      content: '如果你点击OK按钮，文章将会永远被删除，无法恢复。',\r\n      onOk() {\r\n        axios(servicePath.delArticle + id, { withCredentials: true }).then(\r\n          res => {\r\n            message.success('文章删除成功')\r\n            getList()\r\n          }\r\n        )\r\n      },\r\n      onCancel() {\r\n        message.success('没有任何改变')\r\n      },\r\n    });\r\n\r\n  }\r\n\r\n  //修改文章\r\n  const updateArticle = (id, checked) => {\r\n\r\n    props.history.push('/index/add/' + id)\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n    getList()\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n      <List\r\n        header={\r\n          <Row className=\"list-div\">\r\n            <Col span={8}>\r\n              <b>标题</b>\r\n            </Col>\r\n            <Col span={3}>\r\n              <b>类别</b>\r\n            </Col>\r\n            <Col span={3}>\r\n              <b>发布时间</b>\r\n            </Col>\r\n            <Col span={3}>\r\n              <b>集数</b>\r\n            </Col>\r\n            <Col span={3}>\r\n              <b>浏览量</b>\r\n            </Col>\r\n\r\n            <Col span={4}>\r\n              <b>操作</b>\r\n            </Col>\r\n          </Row>\r\n\r\n        }\r\n        bordered\r\n        dataSource={list}\r\n        renderItem={item => (\r\n          <List.Item>\r\n            <Row className=\"list-div\">\r\n              <Col span={8}>\r\n                {item.title}\r\n              </Col>\r\n              <Col span={3}>\r\n                {item.typeName}\r\n              </Col>\r\n              <Col span={3}>\r\n                {item.addTime}\r\n              </Col>\r\n              <Col span={3}>\r\n                共<span>{item.part_count}</span>集\r\n                          </Col>\r\n              <Col span={3}>\r\n                {item.view_count}\r\n              </Col>\r\n\r\n              <Col span={4}>\r\n                <Button type=\"primary\" onClick={() => updateArticle(item.id)}>修改</Button>&nbsp;\r\n\r\n                <Button onClick={() => delArticle(item.id)}>删除 </Button>\r\n              </Col>\r\n            </Row>\r\n\r\n          </List.Item>\r\n        )}\r\n      />\r\n\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default withRouter(ArticleList)","D:\\desktop\\temp\\jspang-admin\\admin\\src\\pages\\Test.jsx",[],{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":23,"column":10,"nodeType":"57","messageId":"58","endLine":23,"endColumn":20},{"ruleId":"55","severity":1,"message":"59","line":23,"column":22,"nodeType":"57","messageId":"58","endLine":23,"endColumn":35},{"ruleId":"60","severity":1,"message":"61","line":58,"column":27,"nodeType":"62","messageId":"63","endLine":58,"endColumn":29},{"ruleId":"64","severity":1,"message":"65","line":168,"column":6,"nodeType":"66","endLine":168,"endColumn":8,"suggestions":"67"},{"ruleId":"51","replacedBy":"68"},{"ruleId":"53","replacedBy":"69"},{"ruleId":"55","severity":1,"message":"70","line":4,"column":50,"nodeType":"57","messageId":"58","endLine":4,"endColumn":56},"no-native-reassign",["71"],"no-negated-in-lhs",["72"],"no-unused-vars","'updateDate' is assigned a value but never used.","Identifier","unusedVar","'setUpdateDate' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getTypeInfo' and 'props.match.params.id'. Either include them or remove the dependency array.","ArrayExpression",["73"],["71"],["72"],"'Switch' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"74","fix":"75"},"Update the dependencies array to be: [getTypeInfo, props.match.params.id]",{"range":"76","text":"77"},[4695,4697],"[getTypeInfo, props.match.params.id]"]